"""
Service d'Intelligence Conversationnelle pour AgroBizChat
D√©tection d'intention, FAQ automatique et r√©ponses contextuelles
"""

import re
import json
import random
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import os

class ConversationalAI:
    """Service d'IA conversationnelle avanc√©e"""
    
    def __init__(self):
        self.intents = self._load_intents()
        self.faq_data = self._load_faq()
        self.scenarios = self._load_scenarios()
        self.context = {}
        
    def _load_intents(self) -> Dict:
        """Charge les patterns d'intention"""
        return {
            'greeting': {
                'patterns': [
                    r'bonjour|salut|hello|hi|bonsoir',
                    r'comment allez-vous|√ßa va|comment √ßa va',
                    r'bonne journ√©e|bonne soir√©e'
                ],
                'responses': [
                    "Bonjour ! Je suis AgroBizChat, votre assistant agricole. Comment puis-je vous aider aujourd'hui ? üåæ",
                    "Salut ! Je suis l√† pour vous accompagner dans vos projets agricoles. Que souhaitez-vous faire ? üå±",
                    "Bonjour ! Pr√™t √† optimiser votre exploitation agricole ? Parlez-moi de vos besoins ! üöú"
                ]
            },
            'business_plan': {
                'patterns': [
                    r'business plan|plan d\'affaires|projet agricole',
                    r'cr√©er un business plan|g√©n√©rer un plan',
                    r'√©tude de faisabilit√©|viabilit√© √©conomique'
                ],
                'responses': [
                    "Je peux vous aider √† cr√©er un business plan agricole complet ! üìä\n\nPour commencer, j'ai besoin de quelques informations :\n‚Ä¢ Votre zone agro-√©cologique\n‚Ä¢ La culture principale\n‚Ä¢ La superficie de votre exploitation\n‚Ä¢ Votre objectif (commercial, familial, etc.)\n\nDites-moi ces d√©tails et je g√©n√©rerai un plan personnalis√© !",
                    "Excellent choix ! Un business plan bien structur√© est essentiel pour r√©ussir. üìà\n\nJe vais vous guider √©tape par √©tape. Commen√ßons par votre profil agricole :\n‚Ä¢ Zone g√©ographique\n‚Ä¢ Culture principale\n‚Ä¢ Surface cultiv√©e\n‚Ä¢ Exp√©rience agricole\n\nQuelle est votre zone agro-√©cologique ?"
                ]
            },
            'weather': {
                'patterns': [
                    r'm√©t√©o|climat|pr√©cipitations|temp√©rature',
                    r'conditions m√©t√©o|pr√©visions m√©t√©o',
                    r'pluie|s√©cheresse|humidit√©'
                ],
                'responses': [
                    "Je peux vous fournir des informations m√©t√©o pr√©cises pour votre zone ! üå¶Ô∏è\n\nPour des conseils agro-m√©t√©o personnalis√©s, dites-moi :\n‚Ä¢ Votre zone agro-√©cologique\n‚Ä¢ Votre culture principale\n‚Ä¢ La p√©riode qui vous int√©resse\n\nJe vous donnerai alors des conseils adapt√©s √† vos besoins !",
                    "La m√©t√©o est cruciale pour vos cultures ! üå§Ô∏è\n\nJe peux vous aider avec :\n‚Ä¢ Les pr√©visions m√©t√©o de votre zone\n‚Ä¢ Les conseils agro-m√©t√©o\n‚Ä¢ Les alertes climatiques\n‚Ä¢ Les recommandations culturales\n\nQuelle est votre zone agro-√©cologique ?"
                ]
            },
            'disease_diagnosis': {
                'patterns': [
                    r'maladie|maladie des plantes|sympt√¥mes',
                    r'feuilles jaunes|taches|pourriture',
                    r'diagnostic|identification maladie'
                ],
                'responses': [
                    "Je peux vous aider √† diagnostiquer les maladies de vos plantes ! üîç\n\nPour un diagnostic pr√©cis :\n‚Ä¢ Prenez une photo claire de la plante malade\n‚Ä¢ Incluez les feuilles, tiges et racines si possible\n‚Ä¢ D√©crivez les sympt√¥mes observ√©s\n\nEnvoyez-moi la photo et je vous donnerai un diagnostic d√©taill√© avec les traitements recommand√©s !",
                    "Le diagnostic pr√©coce est essentiel ! üåø\n\nJe peux identifier :\n‚Ä¢ Les maladies fongiques\n‚Ä¢ Les carences nutritionnelles\n‚Ä¢ Les attaques d'insectes\n‚Ä¢ Les probl√®mes physiologiques\n\nEnvoyez-moi une photo de vos plantes malades pour un diagnostic complet !"
                ]
            },
            'payment': {
                'patterns': [
                    r'paiement|tarif|prix|abonnement',
                    r'combien √ßa co√ªte|tarification|packages',
                    r'premium|basique|coop√©rative'
                ],
                'responses': [
                    "Voici nos packages AgroBizChat : üí≥\n\nüÜì **Gratuit**\n‚Ä¢ Business plans basiques\n‚Ä¢ M√©t√©o de base\n‚Ä¢ Support chat\n\nüí≥ **Basique (500 FCFA)**\n‚Ä¢ Tout du gratuit\n‚Ä¢ PDF premium inclus\n\n‚≠ê **Premium (1500 FCFA)**\n‚Ä¢ Tout du basique\n‚Ä¢ Diagnostic photo inclus\n\nüë• **Coop√©rative (3000 FCFA)**\n‚Ä¢ Tout du premium\n‚Ä¢ Fonctionnalit√©s groupe\n\nQuel package vous int√©resse ?",
                    "Nos tarifs sont adapt√©s aux agriculteurs ! üí∞\n\n**Packages disponibles :**\n‚Ä¢ Gratuit : Fonctionnalit√©s de base\n‚Ä¢ Basique : 500 FCFA/mois\n‚Ä¢ Premium : 1500 FCFA/mois\n‚Ä¢ Coop√©rative : 3000 FCFA/mois\n\nChaque niveau d√©bloque de nouvelles fonctionnalit√©s. Voulez-vous en savoir plus sur un package sp√©cifique ?"
                ]
            },
            'help': {
                'patterns': [
                    r'aide|help|comment faire|comment utiliser',
                    r'je ne comprends pas|je suis perdu',
                    r'fonctionnalit√©s|que puis-je faire'
                ],
                'responses': [
                    "Je suis l√† pour vous aider ! ü§ù\n\n**Mes fonctionnalit√©s principales :**\n\nüìä **Business Plans**\n‚Ä¢ Cr√©ation de plans d'affaires agricoles\n‚Ä¢ √âtudes de faisabilit√©\n‚Ä¢ Analyses √©conomiques\n\nüå¶Ô∏è **M√©t√©o & Conseils**\n‚Ä¢ Pr√©visions m√©t√©o par zone\n‚Ä¢ Conseils agro-m√©t√©o\n‚Ä¢ Alertes climatiques\n\nüîç **Diagnostic Photo**\n‚Ä¢ Identification des maladies\n‚Ä¢ Conseils de traitement\n‚Ä¢ Pr√©vention des probl√®mes\n\nüí≥ **Packages Premium**\n‚Ä¢ Fonctionnalit√©s avanc√©es\n‚Ä¢ PDF d√©taill√©s\n‚Ä¢ Support prioritaire\n\nQue souhaitez-vous explorer ?",
                    "Voici comment je peux vous aider ! üöÄ\n\n**Mes services :**\n\n1Ô∏è‚É£ **Business Plans Agricoles**\nDites-moi votre zone et culture, je cr√©e un plan complet\n\n2Ô∏è‚É£ **Conseils M√©t√©o**\nPr√©visions et conseils adapt√©s √† votre zone\n\n3Ô∏è‚É£ **Diagnostic Maladies**\nEnvoyez une photo, je diagnostique et conseille\n\n4Ô∏è‚É£ **Packages Premium**\nFonctionnalit√©s avanc√©es selon vos besoins\n\nPar quoi voulez-vous commencer ?"
                ]
            },
            'goodbye': {
                'patterns': [
                    r'au revoir|bye|√† bient√¥t|merci',
                    r'fin de conversation|terminer|quitter'
                ],
                'responses': [
                    "Au revoir ! N'h√©sitez pas √† revenir si vous avez d'autres questions. Bonne continuation dans vos projets agricoles ! üåæüëã",
                    "Merci de votre confiance ! Je reste disponible pour vous accompagner dans vos projets agricoles. √Ä bient√¥t ! üöúüëã",
                    "√Ä bient√¥t ! N'oubliez pas que je suis l√† pour vous aider √† r√©ussir vos projets agricoles. Bonne journ√©e ! üå±üëã"
                ]
            }
        }
    
    def _load_faq(self) -> Dict:
        """Charge la base de connaissances FAQ"""
        return {
            'business_plan': {
                'questions': [
                    'comment cr√©er un business plan',
                    'quelles informations pour un business plan',
                    'business plan agricole',
                    '√©tude de faisabilit√©'
                ],
                'answer': """üìä **Cr√©ation d'un Business Plan Agricole**

**√âtapes pour un business plan r√©ussi :**

1Ô∏è‚É£ **Analyse de votre situation**
‚Ä¢ Zone agro-√©cologique
‚Ä¢ Culture principale
‚Ä¢ Surface disponible
‚Ä¢ Exp√©rience agricole

2Ô∏è‚É£ **√âtude de march√©**
‚Ä¢ Demande locale
‚Ä¢ Concurrence
‚Ä¢ Prix de vente
‚Ä¢ Canaux de distribution

3Ô∏è‚É£ **Plan financier**
‚Ä¢ Co√ªts de production
‚Ä¢ Revenus attendus
‚Ä¢ Rentabilit√©
‚Ä¢ Sources de financement

4Ô∏è‚É£ **Plan op√©rationnel**
‚Ä¢ Calendrier cultural
‚Ä¢ Besoins en main d'≈ìuvre
‚Ä¢ √âquipements n√©cessaires
‚Ä¢ Gestion des risques

**Je peux vous aider √† cr√©er un business plan complet ! Dites-moi votre zone et culture principale."""
            },
            'weather_advice': {
                'questions': [
                    'conseils m√©t√©o',
                    'pr√©visions m√©t√©o agricole',
                    'm√©t√©o pour agriculture',
                    'conseils agro-m√©t√©o'
                ],
                'answer': """üå¶Ô∏è **Conseils Agro-M√©t√©o**

**Comment optimiser selon la m√©t√©o :**

üåßÔ∏è **En cas de pluie :**
‚Ä¢ √âvitez les traitements phytosanitaires
‚Ä¢ Surveillez les risques de maladies
‚Ä¢ Prot√©gez les cultures sensibles

‚òÄÔ∏è **En cas de s√©cheresse :**
‚Ä¢ Irriguez aux heures fra√Æches
‚Ä¢ Paillez pour conserver l'humidit√©
‚Ä¢ Surveillez les stress hydriques

üå°Ô∏è **Gestion des temp√©ratures :**
‚Ä¢ Semis selon les temp√©ratures optimales
‚Ä¢ Protection contre les gel√©es
‚Ä¢ Ventilation des serres

**Je peux vous donner des conseils personnalis√©s selon votre zone et culture !"""
            },
            'disease_management': {
                'questions': [
                    'maladies des plantes',
                    'traitement maladies',
                    'pr√©vention maladies',
                    'sympt√¥mes plantes'
                ],
                'answer': """üîç **Gestion des Maladies des Plantes**

**Pr√©vention :**
‚Ä¢ Rotation des cultures
‚Ä¢ Vari√©t√©s r√©sistantes
‚Ä¢ Hygi√®ne des outils
‚Ä¢ Espacement appropri√©

**Surveillance :**
‚Ä¢ Inspection r√©guli√®re
‚Ä¢ D√©tection pr√©coce
‚Ä¢ Identification des sympt√¥mes
‚Ä¢ Suivi des conditions favorables

**Traitement :**
‚Ä¢ Diagnostic pr√©cis
‚Ä¢ Traitements appropri√©s
‚Ä¢ Respect des doses
‚Ä¢ Rotation des produits

**Je peux diagnostiquer vos plantes √† partir d'une photo ! Envoyez-moi une image claire."""
            },
            'payment_info': {
                'questions': [
                    'tarifs',
                    'prix services',
                    'abonnements',
                    'packages'
                ],
                'answer': """üí≥ **Tarification AgroBizChat**

**Nos packages :**

üÜì **Gratuit**
‚Ä¢ Business plans basiques
‚Ä¢ M√©t√©o de base
‚Ä¢ Support chat

üí≥ **Basique (500 FCFA/mois)**
‚Ä¢ Tout du gratuit
‚Ä¢ PDF premium d√©taill√©s
‚Ä¢ Conseils personnalis√©s

‚≠ê **Premium (1500 FCFA/mois)**
‚Ä¢ Tout du basique
‚Ä¢ Diagnostic photo inclus
‚Ä¢ Rapports d√©taill√©s

üë• **Coop√©rative (3000 FCFA/mois)**
‚Ä¢ Tout du premium
‚Ä¢ Fonctionnalit√©s groupe
‚Ä¢ Statistiques partag√©es

**Chaque niveau d√©bloque de nouvelles fonctionnalit√©s !"""
            }
        }
    
    def _load_scenarios(self) -> Dict:
        """Charge les sc√©narios agricoles"""
        return {
            'mais_plantation': {
                'triggers': ['plantation ma√Øs', 'semis ma√Øs', 'planter ma√Øs'],
                'steps': [
                    "üå± **Pr√©paration du sol**\n‚Ä¢ Labour profond (20-25 cm)\n‚Ä¢ Nivellement du terrain\n‚Ä¢ Pr√©paration des billons",
                    "üåæ **Semis**\n‚Ä¢ √âcartement : 80 cm entre rangs\n‚Ä¢ Profondeur : 3-5 cm\n‚Ä¢ Densit√© : 60-80 000 plants/ha",
                    "üíß **Irrigation**\n‚Ä¢ Arrosage apr√®s semis\n‚Ä¢ Maintien de l'humidit√©\n‚Ä¢ √âviter l'exc√®s d'eau",
                    "üåø **Entretien**\n‚Ä¢ D√©sherbage pr√©coce\n‚Ä¢ Fertilisation adapt√©e\n‚Ä¢ Surveillance des ravageurs"
                ]
            },
            'mais_recolte': {
                'triggers': ['r√©colte ma√Øs', 'moisson ma√Øs', 'cueillette ma√Øs'],
                'steps': [
                    "üìä **√âvaluation de maturit√©**\n‚Ä¢ Grains bien remplis\n‚Ä¢ Teneur en eau < 25%\n‚Ä¢ Feuilles dess√©ch√©es",
                    "üî™ **R√©colte**\n‚Ä¢ Coupe des tiges\n‚Ä¢ √âgrenage manuel ou m√©canique\n‚Ä¢ Tri des grains",
                    "‚òÄÔ∏è **S√©chage**\n‚Ä¢ S√©chage au soleil\n‚Ä¢ Teneur finale < 14%\n‚Ä¢ Stockage a√©r√©",
                    "üì¶ **Stockage**\n‚Ä¢ Conteneurs herm√©tiques\n‚Ä¢ Protection contre les rongeurs\n‚Ä¢ Contr√¥le r√©gulier"
                ]
            },
            'pesticide_application': {
                'triggers': ['pesticide', 'traitement', 'pulv√©risation'],
                'steps': [
                    "üîç **Diagnostic**\n‚Ä¢ Identification du probl√®me\n‚Ä¢ Choix du produit appropri√©\n‚Ä¢ Lecture de l'√©tiquette",
                    "üõ°Ô∏è **Protection**\n‚Ä¢ √âquipements de protection\n‚Ä¢ Conditions m√©t√©o favorables\n‚Ä¢ Respect des d√©lais",
                    "üíß **Application**\n‚Ä¢ Dosage pr√©cis\n‚Ä¢ Couverture compl√®te\n‚Ä¢ √âviter la d√©rive",
                    "üìù **Suivi**\n‚Ä¢ Observation des r√©sultats\n‚Ä¢ Respect des d√©lais avant r√©colte\n‚Ä¢ Rotation des produits"
                ]
            }
        }
    
    def process_message(self, message: str, user_id: str = None, context: Dict = None) -> Dict:
        """
        Traite un message utilisateur et g√©n√®re une r√©ponse
        
        Args:
            message (str): Message de l'utilisateur
            user_id (str): ID de l'utilisateur
            context (dict): Contexte de la conversation
            
        Returns:
            dict: R√©ponse avec intention d√©tect√©e et actions
        """
        try:
            # Normaliser le message
            normalized_message = self._normalize_message(message)
            
            # D√©tecter l'intention
            intent, confidence = self._detect_intent(normalized_message)
            
            # V√©rifier la FAQ
            faq_match = self._check_faq(normalized_message)
            
            # V√©rifier les sc√©narios
            scenario_match = self._check_scenarios(normalized_message)
            
            # G√©n√©rer la r√©ponse
            response = self._generate_response(
                intent, confidence, faq_match, scenario_match, 
                normalized_message, context
            )
            
            # Mettre √† jour le contexte
            if user_id:
                self._update_context(user_id, intent, normalized_message)
            
            return {
                'response': response,
                'intent': intent,
                'confidence': confidence,
                'faq_match': faq_match is not None,
                'scenario_match': scenario_match is not None,
                'actions': self._get_actions(intent, context)
            }
            
        except Exception as e:
            print(f"Erreur traitement message: {e}")
            return {
                'response': "D√©sol√©, je n'ai pas compris votre demande. Pouvez-vous reformuler ? ü§î",
                'intent': 'unknown',
                'confidence': 0.0,
                'faq_match': False,
                'scenario_match': False,
                'actions': []
            }
    
    def _normalize_message(self, message: str) -> str:
        """Normalise le message pour l'analyse"""
        # Convertir en minuscules
        message = message.lower()
        
        # Supprimer les caract√®res sp√©ciaux
        message = re.sub(r'[^\w\s]', ' ', message)
        
        # Supprimer les espaces multiples
        message = re.sub(r'\s+', ' ', message).strip()
        
        return message
    
    def _detect_intent(self, message: str) -> Tuple[str, float]:
        """D√©tecte l'intention du message"""
        best_intent = 'unknown'
        best_confidence = 0.0
        
        for intent_name, intent_data in self.intents.items():
            for pattern in intent_data['patterns']:
                matches = re.findall(pattern, message)
                if matches:
                    confidence = len(matches[0]) / len(message) if matches[0] else 0.0
                    if confidence > best_confidence:
                        best_confidence = confidence
                        best_intent = intent_name
        
        return best_intent, best_confidence
    
    def _check_faq(self, message: str) -> Optional[Dict]:
        """V√©rifie si le message correspond √† une FAQ"""
        for category, faq_data in self.faq_data.items():
            for question in faq_data['questions']:
                if any(word in message for word in question.split()):
                    return {
                        'category': category,
                        'answer': faq_data['answer']
                    }
        return None
    
    def _check_scenarios(self, message: str) -> Optional[Dict]:
        """V√©rifie si le message correspond √† un sc√©nario"""
        for scenario_name, scenario_data in self.scenarios.items():
            for trigger in scenario_data['triggers']:
                if trigger in message:
                    return {
                        'scenario': scenario_name,
                        'steps': scenario_data['steps']
                    }
        return None
    
    def _generate_response(self, intent: str, confidence: float, 
                          faq_match: Optional[Dict], scenario_match: Optional[Dict],
                          message: str, context: Dict = None) -> str:
        """G√©n√®re une r√©ponse appropri√©e"""
        
        # Priorit√© 1: Sc√©nario agricole
        if scenario_match:
            steps = scenario_match['steps']
            response = f"üåæ **Guide : {scenario_match['scenario'].replace('_', ' ').title()}**\n\n"
            for i, step in enumerate(steps, 1):
                response += f"{i}. {step}\n\n"
            response += "Avez-vous des questions sur une √©tape sp√©cifique ?"
            return response
        
        # Priorit√© 2: FAQ
        if faq_match:
            return faq_match['answer']
        
        # Priorit√© 3: Intention d√©tect√©e
        if intent in self.intents and confidence > 0.3:
            responses = self.intents[intent]['responses']
            return random.choice(responses)
        
        # R√©ponse par d√©faut
        return self._get_default_response(message, context)
    
    def _get_default_response(self, message: str, context: Dict = None) -> str:
        """G√©n√®re une r√©ponse par d√©faut"""
        default_responses = [
            "Je ne suis pas s√ªr de comprendre. Pouvez-vous reformuler votre question ? ü§î",
            "Int√©ressant ! Pourriez-vous me donner plus de d√©tails sur ce que vous cherchez ? ü§∑‚Äç‚ôÇÔ∏è",
            "Je suis sp√©cialis√© dans l'agriculture. Avez-vous une question sur vos cultures, la m√©t√©o, ou un business plan ? üåæ",
            "Je peux vous aider avec les business plans, la m√©t√©o, le diagnostic des maladies, ou nos packages. Que souhaitez-vous explorer ? üöú"
        ]
        
        return random.choice(default_responses)
    
    def _get_actions(self, intent: str, context: Dict = None) -> List[str]:
        """Retourne les actions sugg√©r√©es selon l'intention"""
        actions_map = {
            'business_plan': ['create_business_plan', 'get_user_info'],
            'weather': ['get_weather', 'get_agro_advice'],
            'disease_diagnosis': ['request_photo', 'get_disease_info'],
            'payment': ['show_packages', 'create_payment'],
            'help': ['show_features', 'show_tutorial'],
            'greeting': ['show_welcome', 'show_features']
        }
        
        return actions_map.get(intent, [])
    
    def _update_context(self, user_id: str, intent: str, message: str):
        """Met √† jour le contexte de l'utilisateur"""
        if user_id not in self.context:
            self.context[user_id] = {
                'last_intent': intent,
                'last_message': message,
                'conversation_history': [],
                'current_scenario': None
            }
        
        self.context[user_id]['last_intent'] = intent
        self.context[user_id]['last_message'] = message
        self.context[user_id]['conversation_history'].append({
            'message': message,
            'intent': intent,
            'timestamp': datetime.now().isoformat()
        })
    
    def get_user_context(self, user_id: str) -> Dict:
        """R√©cup√®re le contexte d'un utilisateur"""
        return self.context.get(user_id, {})
    
    def clear_user_context(self, user_id: str):
        """Efface le contexte d'un utilisateur"""
        if user_id in self.context:
            del self.context[user_id] 