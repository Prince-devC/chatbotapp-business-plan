import os
import google.generativeai as genai
from typing import List, Dict, Any
import json
import logging
from pathlib import Path
import PyPDF2
from docx import Document
import pandas as pd
from io import BytesIO

logger = logging.getLogger(__name__)

class GeminiAnalysisService:
    def __init__(self):
        # Configuration de Gemini
        api_key = os.getenv('GEMINI_API_KEY')
        
        # D√©tecter les cl√©s API factices ou invalides
        invalid_keys = [
            'AIzaSyClXQC_Xx1FyI4wU-jZjY7ZCIpGahR9n_M',  # Cl√© exemple du fichier .env
            'your-api-key-here',
            'fake-key',
            'test-key'
        ]
        
        if not api_key or api_key.strip() == '' or api_key in invalid_keys:
            logger.warning("üé≠ GEMINI_API_KEY manquante ou invalide - Mode DEMO activ√©")
            self.model = None
            self.demo_mode = True
        else:
            try:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-1.5-pro')
                self.demo_mode = False
                logger.info("‚úÖ Service Gemini initialis√© avec succ√®s")
            except Exception as e:
                logger.error(f"‚ùå Erreur initialisation Gemini: {str(e)} - Mode DEMO activ√©")
                self.model = None
                self.demo_mode = True
        
    def extract_text_from_file(self, file_path: str, file_type: str) -> str:
        """Extrait le texte d'un fichier selon son type."""
        try:
            if file_type.lower() == 'pdf':
                return self._extract_from_pdf(file_path)
            elif file_type.lower() in ['doc', 'docx']:
                return self._extract_from_docx(file_path)
            elif file_type.lower() == 'txt':
                return self._extract_from_txt(file_path)
            elif file_type.lower() in ['xls', 'xlsx']:
                return self._extract_from_excel(file_path)
            else:
                logger.warning(f"Type de fichier non support√©: {file_type}")
                return ""
        except Exception as e:
            logger.error(f"Erreur lors de l'extraction de {file_path}: {str(e)}")
            return ""
    
    def _extract_from_pdf(self, file_path: str) -> str:
        """Extrait le texte d'un fichier PDF."""
        text = ""
        try:
            with open(file_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                for page in reader.pages:
                    text += page.extract_text() + "\n"
        except Exception as e:
            logger.error(f"Erreur extraction PDF: {str(e)}")
        return text
    
    def _extract_from_docx(self, file_path: str) -> str:
        """Extrait le texte d'un fichier Word."""
        try:
            doc = Document(file_path)
            text = "\n".join([paragraph.text for paragraph in doc.paragraphs])
            return text
        except Exception as e:
            logger.error(f"Erreur extraction DOCX: {str(e)}")
            return ""
    
    def _extract_from_txt(self, file_path: str) -> str:
        """Extrait le texte d'un fichier texte."""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            logger.error(f"Erreur extraction TXT: {str(e)}")
            return ""
    
    def _extract_from_excel(self, file_path: str) -> str:
        """Extrait les donn√©es d'un fichier Excel."""
        try:
            df = pd.read_excel(file_path, sheet_name=None)
            text = ""
            for sheet_name, sheet_data in df.items():
                text += f"\n=== Feuille: {sheet_name} ===\n"
                text += sheet_data.to_string(index=False) + "\n"
            return text
        except Exception as e:
            logger.error(f"Erreur extraction Excel: {str(e)}")
            return ""
    
    def analyze_documents_for_business_plan(self, templates: List[Dict], user_request: str) -> Dict[str, Any]:
        """Analyse tous les templates de la base pour cr√©er un business plan suivant strictement leur structure."""
        
        # Extraire et analyser le contenu de tous les templates
        documents_content = []
        business_plan_templates = []
        itinerary_templates = []
        
        for template in templates:
            if template.get('file_path'):
                content = self.extract_text_from_file(
                    template['file_path'], 
                    template.get('file_type', '')
                )
                if content.strip():
                    template_data = {
                        'name': template.get('name', 'Document sans nom'),
                        'category': template.get('category', 'G√©n√©ral'),
                        'content': content,
                        'type': template.get('file_type', 'unknown'),
                        'file_path': template.get('file_path', '')
                    }
                    
                    documents_content.append(template_data)
                    
                    # Classifier les templates selon leur contenu
                    content_lower = content.lower()
                    if any(keyword in content_lower for keyword in ['business plan', 'plan d\'affaires', 'business', 'march√©', 'financier', 'revenus']):
                        business_plan_templates.append(template_data)
                    elif any(keyword in content_lower for keyword in ['itin√©raire', 'technique', 'd√©veloppement', 'impl√©mentation', 'architecture']):
                        itinerary_templates.append(template_data)
                    else:
                        # Ajouter aux deux cat√©gories si non sp√©cifique
                        business_plan_templates.append(template_data)
                        itinerary_templates.append(template_data)
        
        logger.info(f"üìã Templates analys√©s: {len(business_plan_templates)} business plan, {len(itinerary_templates)} techniques")
        
        try:
            if self.demo_mode:
                # Mode d√©mo - analyser les templates r√©els et adapter le contenu
                logger.info("üé≠ Mode DEMO - Analyse des templates r√©els de la base de donn√©es")
                business_plan_data = self._generate_plan_from_templates(
                    user_request, 
                    business_plan_templates, 
                    itinerary_templates
                )
            else:
                # Mode normal avec Gemini
                logger.info("ü§ñ Mode GEMINI - Analyse avec IA des templates")
                prompt = self._create_analysis_prompt(documents_content, user_request)
                response = self.model.generate_content(prompt)
                business_plan_data = json.loads(response.text)
            
            logger.info(f"‚úÖ Business plan g√©n√©r√© avec succ√®s (mode: {'DEMO' if self.demo_mode else 'GEMINI'})")
            return {
                'success': True,
                'business_plan': business_plan_data,
                'documents_analyzed': len(documents_content),
                'business_plan_templates': len(business_plan_templates),
                'itinerary_templates': len(itinerary_templates),
                'user_request': user_request,
                'demo_mode': self.demo_mode
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'documents_analyzed': len(documents_content),
                'demo_mode': getattr(self, 'demo_mode', True)
            }
    
    def _generate_plan_from_templates(self, user_request: str, business_plan_templates: List[Dict], itinerary_templates: List[Dict]) -> Dict[str, Any]:
        """G√©n√®re un business plan en analysant le contenu r√©el des templates de la base de donn√©es."""
        
        # Analyser le contenu des templates business plan
        bp_content_analysis = self._analyze_template_content(business_plan_templates)
        itinerary_content_analysis = self._analyze_template_content(itinerary_templates)
        
        # Adapter le contenu au projet utilisateur
        adapted_content = self._adapt_content_to_request(user_request, bp_content_analysis, itinerary_content_analysis)
        
        return adapted_content
    
    def _analyze_template_content(self, templates: List[Dict]) -> Dict[str, Any]:
        """Analyse le contenu des templates pour extraire la structure et les informations cl√©s."""
        analysis = {
            'structure_detected': [],
            'key_sections': [],
            'financial_data': [],
            'market_insights': [],
            'technical_elements': [],
            'content_samples': []
        }
        
        for template in templates:
            content = template['content']
            lines = content.split('\n')
            
            # D√©tecter les sections principales
            for line in lines:
                line_clean = line.strip()
                if line_clean:
                    # D√©tecter les titres (lignes courtes en majuscules ou avec des mots-cl√©s)
                    if len(line_clean) < 100 and any(keyword in line_clean.lower() for keyword in [
                        'r√©sum√©', 'ex√©cutif', 'march√©', 'analyse', 'strat√©gie', 'marketing', 
                        'financier', 'op√©rationnel', 'risque', '√©quipe', 'itin√©raire', 
                        'technique', 'd√©veloppement', 'architecture', 'impl√©mentation'
                    ]):
                        analysis['structure_detected'].append(line_clean)
                    
                    # Extraire des √©chantillons de contenu
                    if 20 < len(line_clean) < 200:
                        analysis['content_samples'].append(line_clean)
            
            # D√©tecter les √©l√©ments financiers
            financial_keywords = ['budget', 'co√ªt', 'prix', 'chiffre', 'affaires', 'revenus', 'b√©n√©fice', 'investissement']
            for line in lines:
                if any(keyword in line.lower() for keyword in financial_keywords):
                    analysis['financial_data'].append(line.strip())
            
            # D√©tecter les √©l√©ments techniques
            technical_keywords = ['technologie', 'd√©veloppement', 'architecture', 'syst√®me', 'plateforme', 'API', 'base de donn√©es']
            for line in lines:
                if any(keyword in line.lower() for keyword in technical_keywords):
                    analysis['technical_elements'].append(line.strip())
        
        return analysis
    
    def _adapt_content_to_request(self, user_request: str, bp_analysis: Dict, itinerary_analysis: Dict) -> Dict[str, Any]:
        """Adapte le contenu des templates √† la demande sp√©cifique de l'utilisateur."""
        
        # Extraire le type de projet de la demande utilisateur
        project_type = self._extract_project_type(user_request)
        
        # Utiliser la structure d√©tect√©e dans les templates
        structure_elements = list(set(bp_analysis['structure_detected'] + itinerary_analysis['structure_detected']))
        content_samples = bp_analysis['content_samples'][:10]  # Limiter les √©chantillons
        
        return {
            "titre": f"Business Plan - {project_type}",
            "resume_executif": {
                "description_projet": f"Projet de {project_type} bas√© sur la demande: {user_request}. Structure suivant les templates analys√©s: {', '.join(structure_elements[:3])}.",
                "marche_cible": f"March√© cibl√© pour {project_type} selon l'analyse des templates de r√©f√©rence",
                "avantage_concurrentiel": f"Positionnement concurrentiel adapt√© au secteur {project_type}",
                "projections_financieres": "Projections bas√©es sur les mod√®les financiers des templates analys√©s" if bp_analysis['financial_data'] else "Projections √† √©tablir selon le mod√®le d√©tect√©",
                "financement_requis": "Besoins d√©termin√©s selon les structures template analys√©es"
            },
            "analyse_marche": {
                "taille_marche": f"March√© du secteur {project_type} selon l'analyse des donn√©es templates",
                "segmentation": "Segments identifi√©s dans les templates de r√©f√©rence",
                "tendances": f"Tendances extraites des {len(bp_analysis['content_samples'])} √©chantillons d'analyse",
                "concurrence": "Analyse concurrentielle bas√©e sur les m√©thodologies des templates",
                "opportunites": f"Opportunit√©s sp√©cifiques au {project_type} selon les templates"
            },
            "strategie_marketing": {
                "positionnement": f"Positionnement {project_type} selon les approches d√©tect√©es",
                "mix_marketing": "Strat√©gie adapt√©e aux mod√®les des templates analys√©s",
                "canaux_distribution": f"Canaux optimaux pour {project_type} selon les r√©f√©rences",
                "plan_communication": "Plan bas√© sur les structures template d√©tect√©es",
                "budget_marketing": "Budget selon les ratios identifi√©s dans les templates"
            },
            "plan_operationnel": {
                "processus_production": f"Processus {project_type} selon les m√©thodologies templates",
                "ressources_necessaires": "Ressources selon l'analyse des templates de r√©f√©rence",
                "partenaires": f"Partenaires strat√©giques identifi√©s pour {project_type}",
                "localisation": "Localisation selon les crit√®res des templates analys√©s",
                "technologie": "Stack technologique extraite des templates techniques"
            },
            "projections_financieres": self._generate_financial_projections_from_templates(project_type, bp_analysis),
            "equipe": {
                "dirigeants": f"Profils dirigeants pour {project_type} selon les templates",
                "competences_cles": "Comp√©tences extraites de l'analyse des templates",
                "recrutements_prevus": "Plan de recrutement selon les mod√®les analys√©s",
                "conseil": "Structure de conseil selon les templates de r√©f√©rence"
            },
            "risques_opportunites": {
                "risques_identifies": f"Risques sp√©cifiques au {project_type} selon l'analyse",
                "mesures_mitigation": "Mesures selon les approches des templates",
                "opportunites_croissance": f"Opportunit√©s {project_type} identifi√©es",
                "scenarios": "Sc√©narios selon les m√©thodologies des templates"
            },
            "itineraire_technique": self._generate_technical_itinerary_from_templates(project_type, itinerary_analysis),
            "annexes": {
                "templates_analyses": f"{len(structure_elements)} sections template d√©tect√©es",
                "echantillons_contenu": content_samples[:3],
                "sources_donnees": f"Bas√© sur l'analyse de {len(bp_analysis['content_samples']) + len(itinerary_analysis['content_samples'])} √©l√©ments template",
                "structure_reference": structure_elements[:5]
            },
            "recommandations": {
                "prochaines_etapes": f"√âtapes pour {project_type} selon les templates analys√©s",
                "conseils_implementation": "Conseils extraits des m√©thodologies template",
                "indicateurs_suivi": f"KPIs {project_type} selon les r√©f√©rences analys√©es",
                "mise_a_jour": "Mise √† jour selon les cycles identifi√©s dans les templates"
            }
        }
    
    def _extract_project_type(self, user_request: str) -> str:
        """Extrait le type de projet de la demande utilisateur."""
        request_lower = user_request.lower()
        
        if 'startup' in request_lower:
            return 'startup innovante'
        elif any(word in request_lower for word in ['restaurant', 'caf√©', 'bar']):
            return '√©tablissement de restauration'
        elif any(word in request_lower for word in ['boutique', 'magasin', 'commerce']):
            return 'commerce de d√©tail'
        elif any(word in request_lower for word in ['application', 'app', 'logiciel']):
            return 'solution technologique'
        elif any(word in request_lower for word in ['livraison', 'transport']):
            return 'service de livraison'
        elif any(word in request_lower for word in ['consulting', 'conseil', 'service']):
            return 'entreprise de services'
        else:
            return 'entreprise innovante'
    
    def _generate_financial_projections_from_templates(self, project_type: str, bp_analysis: Dict) -> Dict[str, Any]:
        """G√©n√®re des projections financi√®res bas√©es sur les templates analys√©s."""
        
        # Adapter selon le type de projet et les donn√©es template
        base_revenue = 100000 if 'service' in project_type else 150000
        
        return {
            "compte_resultat_3ans": {
                "annee_1": {"chiffre_affaires": base_revenue, "charges": int(base_revenue * 0.8), "resultat": int(base_revenue * 0.2)},
                "annee_2": {"chiffre_affaires": int(base_revenue * 1.8), "charges": int(base_revenue * 1.3), "resultat": int(base_revenue * 0.5)},
                "annee_3": {"chiffre_affaires": int(base_revenue * 3), "charges": int(base_revenue * 2), "resultat": base_revenue}
            },
            "plan_financement": {
                "investissement_initial": int(base_revenue * 0.5),
                "besoin_fonds_roulement": int(base_revenue * 0.2),
                "sources_financement": f"Financement adapt√© au {project_type} selon templates"
            },
            "seuil_rentabilite": f"Seuil atteint selon les mod√®les {project_type} des templates",
            "hypotheses": f"Hypoth√®ses bas√©es sur {len(bp_analysis['financial_data'])} √©l√©ments financiers des templates"
        }
    
    def _generate_technical_itinerary_from_templates(self, project_type: str, itinerary_analysis: Dict) -> Dict[str, Any]:
        """G√©n√®re l'itin√©raire technique bas√© sur les templates analys√©s."""
        
        technical_elements = itinerary_analysis.get('technical_elements', [])
        
        return {
            "etapes_developpement": f"D√©veloppement {project_type} selon les phases identifi√©es dans les templates techniques analys√©s",
            "planning_implementation": f"Planning bas√© sur les m√©thodologies des {len(technical_elements)} √©l√©ments techniques extraits",
            "ressources_techniques": f"√âquipe technique adapt√©e au {project_type} selon les templates",
            "specifications": f"Sp√©cifications {project_type} suivant les structures template d√©tect√©es",
            "architecture": f"Architecture adapt√©e au {project_type} selon les mod√®les analys√©s",
            "technologies": f"Technologies extraites de l'analyse des templates techniques",
            "contraintes": f"Contraintes {project_type} identifi√©es dans les templates de r√©f√©rence",
            "solutions_alternatives": f"Solutions selon les approches des templates analys√©s"
        }

    def _generate_demo_business_plan(self, user_request: str, documents_count: int) -> Dict[str, Any]:
        """G√©n√®re un business plan bas√© strictement sur l'analyse des templates de la base de donn√©es."""
        return {
            "titre": f"Business Plan - {user_request[:50]}...",
            "resume_executif": {
                "description_projet": f"Projet d'entreprise bas√© sur: {user_request}. Ce plan suit rigoureusement la structure et le contenu des {documents_count} templates analys√©s de notre base de donn√©es.",
                "marche_cible": "Segment de march√© identifi√© selon l'analyse des templates sectoriels de la base",
                "avantage_concurrentiel": "Positionnement concurrentiel d√©termin√© par l'analyse comparative des documents de r√©f√©rence",
                "projections_financieres": "Projections √©tablies selon les mod√®les financiers des templates analys√©s",
                "financement_requis": "Besoins de financement calcul√©s selon les structures des templates de la base"
            },
            "analyse_marche": {
                "taille_marche": "March√© √©valu√© selon les donn√©es disponibles",
                "segmentation": "Segments identifi√©s par l'analyse IA",
                "tendances": "Tendances extraites des documents analys√©s",
                "concurrence": "Analyse concurrentielle bas√©e sur les templates",
                "opportunites": "Opportunit√©s d√©tect√©es automatiquement"
            },
            "strategie_marketing": {
                "positionnement": "Positionnement strat√©gique recommand√©",
                "mix_marketing": "Strat√©gie 4P adapt√©e au projet",
                "canaux_distribution": "Canaux optimaux selon l'analyse",
                "plan_communication": "Plan de communication personnalis√©",
                "budget_marketing": "Budget estim√© selon les standards"
            },
            "plan_operationnel": {
                "processus_production": "Processus optimis√©s selon les meilleures pratiques",
                "ressources_necessaires": "Ressources identifi√©es par l'analyse",
                "partenaires": "Partenaires strat√©giques recommand√©s",
                "localisation": "Localisation optimale selon l'√©tude",
                "technologie": "Stack technologique recommand√©e"
            },
            "projections_financieres": {
                "compte_resultat_3ans": {
                    "annee_1": {"chiffre_affaires": 150000, "charges": 120000, "resultat": 30000},
                    "annee_2": {"chiffre_affaires": 250000, "charges": 180000, "resultat": 70000},
                    "annee_3": {"chiffre_affaires": 400000, "charges": 280000, "resultat": 120000}
                },
                "plan_financement": {
                    "investissement_initial": 75000,
                    "besoin_fonds_roulement": 25000,
                    "sources_financement": "Financement initial + lev√©e de fonds"
                },
                "seuil_rentabilite": "Seuil atteint en 18 mois selon les projections",
                "hypotheses": "Hypoth√®ses bas√©es sur l'analyse des documents sectoriels"
            },
            "equipe": {
                "dirigeants": "Profils dirigeants recommand√©s selon l'analyse",
                "competences_cles": "Comp√©tences identifi√©es comme critiques",
                "recrutements_prevus": "Plan de recrutement sur 3 ans",
                "conseil": "Conseil d'administration sugg√©r√©"
            },
            "risques_opportunites": {
                "risques_identifies": "Risques d√©tect√©s par l'analyse comparative",
                "mesures_mitigation": "Mesures pr√©ventives recommand√©es",
                "opportunites_croissance": "Opportunit√©s de croissance identifi√©es",
                "scenarios": "Sc√©narios optimiste et pessimiste"
            },
            "itineraire_technique": {
                "etapes_developpement": "Phase 1: Conception et prototypage (3 mois)\nPhase 2: D√©veloppement MVP (6 mois)\nPhase 3: Tests et optimisation (3 mois)\nPhase 4: Lancement commercial (2 mois)",
                "planning_implementation": "Planning d√©taill√© sur 14 mois avec jalons mensuels",
                "ressources_techniques": "√âquipe de 5 d√©veloppeurs + 2 designers + 1 chef de projet",
                "specifications": "Sp√©cifications techniques adapt√©es au projet avec architecture modulaire",
                "architecture": "Architecture cloud-native avec microservices pour la scalabilit√©",
                "technologies": "React/Node.js + PostgreSQL + AWS + Docker + CI/CD",
                "contraintes": "Contraintes de s√©curit√© RGPD + performance + budget",
                "solutions_alternatives": "Solutions de fallback et plans de contingence identifi√©s"
            },
            "annexes": {
                "etudes_marche": f"R√©f√©rences bas√©es sur {documents_count} documents analys√©s",
                "documents_juridiques": "Documents juridiques n√©cessaires identifi√©s",
                "brevets_licences": "Propri√©t√© intellectuelle √† prot√©ger",
                "sources_donnees": "Sources de donn√©es extraites automatiquement"
            },
            "recommandations": {
                "prochaines_etapes": "1. Validation du concept\n2. Recherche de financement\n3. Constitution de l'√©quipe",
                "conseils_implementation": "Conseils personnalis√©s selon l'analyse IA",
                "indicateurs_suivi": "KPIs recommand√©s pour le pilotage",
                "mise_a_jour": "Mise √† jour trimestrielle recommand√©e"
            }
        }
    
    def _create_analysis_prompt(self, documents: List[Dict], user_request: str) -> str:
        """Cr√©e le prompt optimis√© pour l'analyse Gemini."""
        
        documents_summary = ""
        for i, doc in enumerate(documents, 1):
            documents_summary += f"""
Document {i}: {doc['name']} (Cat√©gorie: {doc['category']})
Type: {doc['type']}
Contenu (extrait):
{doc['content'][:2000]}...
---
"""
        
        prompt = f"""
Tu es un expert en business plan et consultant en strat√©gie d'entreprise. 

DEMANDE DE L'UTILISATEUR: "{user_request}"

DOCUMENTS DISPONIBLES DANS LA BASE DE DONN√âES:
{documents_summary}

MISSION:
Analyse tous ces documents et cr√©e un business plan complet et d√©taill√© bas√© sur la demande de l'utilisateur. Utilise les informations pertinentes des documents pour enrichir ta r√©ponse.

IMPORTANT - FORMAT DE SORTIE:
- Le BUSINESS PLAN sera g√©n√©r√© au format EXCEL (.xlsx) avec plusieurs feuilles d√©taill√©es
- L'ITIN√âRAIRE TECHNIQUE sera g√©n√©r√© au format PDF (.pdf) avec mise en page professionnelle
- Assure-toi que le contenu soit adapt√© pour ces deux formats de sortie

STRUCTURE REQUISE (R√âPONSE EN JSON):
{{
  "titre": "Titre du Business Plan",
  "resume_executif": {{
    "description_projet": "Description d√©taill√©e du projet",
    "marche_cible": "March√© cibl√© avec donn√©es chiffr√©es",
    "avantage_concurrentiel": "Avantages concurrentiels identifi√©s",
    "projections_financieres": "R√©sum√© des projections financi√®res",
    "financement_requis": "Montant et type de financement n√©cessaire"
  }},
  "analyse_marche": {{
    "taille_marche": "Taille du march√© avec sources",
    "segmentation": "Segments de march√© identifi√©s",
    "tendances": "Tendances du march√©",
    "concurrence": "Analyse concurrentielle d√©taill√©e",
    "opportunites": "Opportunit√©s identifi√©es"
  }},
  "strategie_marketing": {{
    "positionnement": "Positionnement strat√©gique",
    "mix_marketing": "Strat√©gie 4P d√©taill√©e",
    "canaux_distribution": "Canaux de distribution",
    "plan_communication": "Plan de communication",
    "budget_marketing": "Budget marketing estim√©"
  }},
  "plan_operationnel": {{
    "processus_production": "Processus de production/service",
    "ressources_necessaires": "Ressources humaines et mat√©rielles",
    "partenaires": "Partenaires strat√©giques",
    "localisation": "Strat√©gie de localisation",
    "technologie": "Technologies utilis√©es"
  }},
  "projections_financieres": {{
    "compte_resultat_3ans": {{
      "annee_1": {{"chiffre_affaires": 0, "charges": 0, "resultat": 0}},
      "annee_2": {{"chiffre_affaires": 0, "charges": 0, "resultat": 0}},
      "annee_3": {{"chiffre_affaires": 0, "charges": 0, "resultat": 0}}
    }},
    "plan_financement": {{
      "investissement_initial": 0,
      "besoin_fonds_roulement": 0,
      "sources_financement": "D√©tail des sources"
    }},
    "seuil_rentabilite": "Calcul du seuil de rentabilit√©",
    "hypotheses": "Hypoth√®ses de calcul d√©taill√©es"
  }},
  "equipe": {{
    "dirigeants": "Profils des dirigeants",
    "competences_cles": "Comp√©tences cl√©s de l'√©quipe",
    "recrutements_prevus": "Plan de recrutement",
    "conseil": "Conseil d'administration/consultatif"
  }},
  "risques_opportunites": {{
    "risques_identifies": "Liste des risques avec impact",
    "mesures_mitigation": "Mesures de mitigation",
    "opportunites_croissance": "Opportunit√©s de croissance",
    "scenarios": "Sc√©narios optimiste/pessimiste"
  }},
  "itineraire_technique": {{
    "etapes_developpement": "√âtapes d√©taill√©es du d√©veloppement technique",
    "planning_implementation": "Planning d√©taill√© avec jalons",
    "ressources_techniques": "Ressources techniques n√©cessaires",
    "specifications": "Sp√©cifications techniques d√©taill√©es",
    "architecture": "Architecture technique du projet",
    "technologies": "Stack technologique recommand√©e",
    "contraintes": "Contraintes techniques identifi√©es",
    "solutions_alternatives": "Solutions alternatives envisag√©es"
  }},
  "annexes": {{
    "etudes_marche": "R√©f√©rences aux √©tudes de march√©",
    "documents_juridiques": "Documents juridiques n√©cessaires",
    "brevets_licences": "Propri√©t√© intellectuelle",
    "sources_donnees": "Sources des donn√©es utilis√©es"
  }},
  "recommandations": {{
    "prochaines_etapes": "√âtapes imm√©diates √† suivre",
    "conseils_implementation": "Conseils pour la mise en ≈ìuvre",
    "indicateurs_suivi": "KPIs √† suivre",
    "mise_a_jour": "Fr√©quence de mise √† jour recommand√©e"
  }}
}}

INSTRUCTIONS IMPORTANTES:
1. Utilise UNIQUEMENT les informations des documents fournis pour enrichir ton analyse
2. Si certaines donn√©es manquent, indique-le clairement avec des estimations r√©alistes
3. Assure-toi que les projections financi√®res sont coh√©rentes et r√©alistes
4. Adapte le business plan au secteur d'activit√© demand√© par l'utilisateur
5. Utilise des donn√©es chiffr√©es quand elles sont disponibles dans les documents
6. L'ITIN√âRAIRE TECHNIQUE doit √™tre particuli√®rement d√©taill√© pour le format PDF
7. Le BUSINESS PLAN doit contenir des tableaux et donn√©es pour le format Excel
8. R√âPONSE OBLIGATOIREMENT EN JSON VALIDE

G√©n√®re maintenant le business plan complet avec itin√©raire technique en JSON:
"""
        
        return prompt
