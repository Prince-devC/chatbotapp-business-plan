"""
Service de localisation pour AgroBizChat
Support des langues locales b√©ninoises
"""

import json
import os
from typing import Dict, List, Optional
from datetime import datetime

class LocalizationService:
    """Service de localisation pour les langues locales b√©ninoises"""
    
    def __init__(self):
        self.supported_languages = self._load_supported_languages()
        self.translations = self._load_translations()
        self.agricultural_terms = self._load_agricultural_terms()
        
    def _load_supported_languages(self) -> Dict:
        """Charge les langues support√©es"""
        return {
            'fr': {
                'name': 'Fran√ßais',
                'native_name': 'Fran√ßais',
                'code': 'fr',
                'direction': 'ltr',
                'flag': 'üá´üá∑'
            },
            'fon': {
                'name': 'Fon',
                'native_name': 'F…îÃÄngb√®',
                'code': 'fon',
                'direction': 'ltr',
                'flag': 'üáßüáØ'
            },
            'yor': {
                'name': 'Yoruba',
                'native_name': '√àd√® Yor√πb√°',
                'code': 'yor',
                'direction': 'ltr',
                'flag': 'üáßüáØ'
            },
            'min': {
                'name': 'Mina',
                'native_name': 'Gen-Gbe',
                'code': 'min',
                'direction': 'ltr',
                'flag': 'üáßüáØ'
            },
            'bar': {
                'name': 'Bariba',
                'native_name': 'Baat…înum',
                'code': 'bar',
                'direction': 'ltr',
                'flag': 'üáßüáØ'
            }
        }
    
    def _load_translations(self) -> Dict:
        """Charge les traductions"""
        return {
            'fr': {
                'greeting': 'Bonjour ! Je suis AgroBizChat, votre assistant agricole.',
                'welcome': 'Bienvenue dans AgroBizChat !',
                'help': 'Comment puis-je vous aider ?',
                'business_plan': 'Plan d\'affaires',
                'weather': 'M√©t√©o',
                'disease': 'Maladie',
                'payment': 'Paiement',
                'settings': 'Param√®tres',
                'language': 'Langue',
                'save': 'Enregistrer',
                'cancel': 'Annuler',
                'confirm': 'Confirmer',
                'error': 'Erreur',
                'success': 'Succ√®s',
                'loading': 'Chargement...',
                'not_found': 'Non trouv√©',
                'invalid_input': 'Entr√©e invalide',
                'network_error': 'Erreur r√©seau',
                'server_error': 'Erreur serveur',
                'timeout': 'D√©lai d\'attente d√©pass√©'
            },
            'fon': {
                'greeting': 'Bonjour ! N ye AgroBizChat, n…îÃÄ …ñ…îÃÄ hw…õÃÄgb…õÃÄ …ñ…îÃÄ.',
                'welcome': 'Agoo w√° AgroBizChat !',
                'help': 'N ka ny…õÃÄ …ñ…îÃÄ h…õÃÄn ?',
                'business_plan': 'Gan …ñ…îÃÄ hw…õÃÄgb…õÃÄ',
                'weather': 'Xw√©',
                'disease': '√Ät…îÃÄn',
                'payment': 'Gan',
                'settings': '√Äy√¨k…îÃÄ',
                'language': 'Gb…õÃÄgb…õÃÄ',
                'save': 'Kp…în',
                'cancel': 'T…în',
                'confirm': 'Kp…în',
                'error': '√Ät…îÃÄn',
                'success': 'Y√©',
                'loading': 'N…îÃÄ …ñ…îÃÄ...',
                'not_found': 'M…õÃÄ …ñ…îÃÄ',
                'invalid_input': '√Ät…îÃÄn …ñ…îÃÄ',
                'network_error': '√Ät…îÃÄn …ñ…îÃÄ',
                'server_error': '√Ät…îÃÄn …ñ…îÃÄ',
                'timeout': '√Ät…îÃÄn …ñ…îÃÄ'
            },
            'yor': {
                'greeting': '·∫∏ k√°√†b·ªçÃÄ ! √àmi ni AgroBizChat, ol√πr√†nl·ªçÃÅw·ªçÃÅ √¨·π£·ªçÃÄ·ªçÃÅgb√¨n r·∫π.',
                'welcome': 'K√°√†b·ªçÃÄ s√≠ AgroBizChat !',
                'help': 'B√°wo ni mo ·π£e l√® r√†n y√≠n l·ªçÃÅw·ªçÃÅ ?',
                'business_plan': '√àt√≤ √¨·π£√≤w√≤',
                'weather': '√íj√≤',
                'disease': '√Är√πn',
                'payment': '√åsanw√≥',
                'settings': '√å·π£√®t√≤',
                'language': '√àd√®',
                'save': 'Fipam·ªçÃÅ',
                'cancel': 'Fagil√©',
                'confirm': 'J·∫πÃÅr√¨√≠',
                'error': '√Äs√¨·π£e',
                'success': '√ål·ªçÃÅs√≠',
                'loading': 'N ·π£√≠·π£e...',
                'not_found': 'K√≤ r√≠',
                'invalid_input': '√åb√©√®r√® t√≠ k√≤ t·ªçÃÅ',
                'network_error': '√Äs√¨·π£e n·∫πÃÅt√≠w·ªçÃÅ·ªçÃÄk√¨',
                'server_error': '√Äs√¨·π£e s·∫πÃÅ·∫πÃÄf√†',
                'timeout': '√Äk√≥k√≤ t√≠ k·ªçj√°'
            },
            'min': {
                'greeting': 'Bonjour ! N ye AgroBizChat, n…îÃÄ …ñ…îÃÄ hw…õÃÄgb…õÃÄ …ñ…îÃÄ.',
                'welcome': 'Agoo w√° AgroBizChat !',
                'help': 'N ka ny…õÃÄ …ñ…îÃÄ h…õÃÄn ?',
                'business_plan': 'Gan …ñ…îÃÄ hw…õÃÄgb…õÃÄ',
                'weather': 'Xw√©',
                'disease': '√Ät…îÃÄn',
                'payment': 'Gan',
                'settings': '√Äy√¨k…îÃÄ',
                'language': 'Gb…õÃÄgb…õÃÄ',
                'save': 'Kp…în',
                'cancel': 'T…în',
                'confirm': 'Kp…în',
                'error': '√Ät…îÃÄn',
                'success': 'Y√©',
                'loading': 'N…îÃÄ …ñ…îÃÄ...',
                'not_found': 'M…õÃÄ …ñ…îÃÄ',
                'invalid_input': '√Ät…îÃÄn …ñ…îÃÄ',
                'network_error': '√Ät…îÃÄn …ñ…îÃÄ',
                'server_error': '√Ät…îÃÄn …ñ…îÃÄ',
                'timeout': '√Ät…îÃÄn …ñ…îÃÄ'
            },
            'bar': {
                'greeting': 'Bonjour ! N ye AgroBizChat, n…îÃÄ …ñ…îÃÄ hw…õÃÄgb…õÃÄ …ñ…îÃÄ.',
                'welcome': 'Agoo w√° AgroBizChat !',
                'help': 'N ka ny…õÃÄ …ñ…îÃÄ h…õÃÄn ?',
                'business_plan': 'Gan …ñ…îÃÄ hw…õÃÄgb…õÃÄ',
                'weather': 'Xw√©',
                'disease': '√Ät…îÃÄn',
                'payment': 'Gan',
                'settings': '√Äy√¨k…îÃÄ',
                'language': 'Gb…õÃÄgb…õÃÄ',
                'save': 'Kp…în',
                'cancel': 'T…în',
                'confirm': 'Kp…în',
                'error': '√Ät…îÃÄn',
                'success': 'Y√©',
                'loading': 'N…îÃÄ …ñ…îÃÄ...',
                'not_found': 'M…õÃÄ …ñ…îÃÄ',
                'invalid_input': '√Ät…îÃÄn …ñ…îÃÄ',
                'network_error': '√Ät…îÃÄn …ñ…îÃÄ',
                'server_error': '√Ät…îÃÄn …ñ…îÃÄ',
                'timeout': '√Ät…îÃÄn …ñ…îÃÄ'
            }
        }
    
    def _load_agricultural_terms(self) -> Dict:
        """Charge la terminologie agricole"""
        return {
            'fr': {
                'corn': 'Ma√Øs',
                'pineapple': 'Ananas',
                'agriculture': 'Agriculture',
                'farmer': 'Agriculteur',
                'farm': 'Ferme',
                'crop': 'Culture',
                'harvest': 'R√©colte',
                'planting': 'Plantation',
                'irrigation': 'Irrigation',
                'fertilizer': 'Engrais',
                'pesticide': 'Pesticide',
                'soil': 'Sol',
                'weather': 'M√©t√©o',
                'rain': 'Pluie',
                'sun': 'Soleil',
                'disease': 'Maladie',
                'treatment': 'Traitement',
                'prevention': 'Pr√©vention',
                'yield': 'Rendement',
                'profit': 'Profit',
                'cost': 'Co√ªt',
                'price': 'Prix',
                'market': 'March√©',
                'business_plan': 'Plan d\'affaires',
                'investment': 'Investissement',
                'loan': 'Pr√™t',
                'cooperative': 'Coop√©rative',
                'extension': 'Vulgarisation',
                'training': 'Formation',
                'technology': 'Technologie'
            },
            'fon': {
                'corn': 'Kp…õn',
                'pineapple': 'Anana',
                'agriculture': 'Agb…îÃÄ',
                'farmer': 'Agb…îÃÄt…î',
                'farm': 'Agb…îÃÄ',
                'crop': 'Gan',
                'harvest': 'Gan',
                'planting': 'Gan',
                'irrigation': 'T…îÃÄ',
                'fertilizer': 'Gan',
                'pesticide': 'Gan',
                'soil': 'T…îÃÄ',
                'weather': 'Xw√©',
                'rain': 'J√≠',
                'sun': 'Xw√©',
                'disease': '√Ät…îÃÄn',
                'treatment': 'Gan',
                'prevention': 'Gan',
                'yield': 'Gan',
                'profit': 'Gan',
                'cost': 'Gan',
                'price': 'Gan',
                'market': 'Gan',
                'business_plan': 'Gan …ñ…îÃÄ hw…õÃÄgb…õÃÄ',
                'investment': 'Gan',
                'loan': 'Gan',
                'cooperative': 'Gan',
                'extension': 'Gan',
                'training': 'Gan',
                'technology': 'Gan'
            },
            'yor': {
                'corn': '·ªåk√†',
                'pineapple': '·ªåÃÄgb·∫πÃÄd·∫πÃÄ',
                'agriculture': '√å·π£·ªçÃÄ·ªçÃÅgb√¨n',
                'farmer': 'Ol√πgb√¨n',
                'farm': '√ågb√≥',
                'crop': '·ªåÃÄgb√¨n',
                'harvest': '√åk√≥',
                'planting': '√ågb√¨n',
                'irrigation': '√å·π£an omi',
                'fertilizer': '√Äj√≠l·∫πÃÄ',
                'pesticide': 'O√≤g√πn',
                'soil': 'Il·∫πÃÄ',
                'weather': '√íj√≤',
                'rain': '√íj√≤',
                'sun': '√í√≤r√πn',
                'disease': '√Är√πn',
                'treatment': '√åw·ªçÃÄs√†n',
                'prevention': '√åd·∫πÃÅnu',
                'yield': '√åd√°',
                'profit': '√àr√®',
                'cost': '√ån√†',
                'price': '√åy√°',
                'market': '·ªåj√†',
                'business_plan': '√àt√≤ √¨·π£√≤w√≤',
                'investment': '√åd√≠w·ªçÃÅn',
                'loan': '√ågb√©y√†w√≥',
                'cooperative': '√å·π£·ªçÃÄkan',
                'extension': '√åt√†nk√°l·∫πÃÄ',
                'training': '√åk·∫πÃÅk·ªçÃÄ·ªçÃÅ',
                'technology': '√åm·ªçÃÄ √¨·π£·∫πÃÅ'
            },
            'min': {
                'corn': 'Kp…õn',
                'pineapple': 'Anana',
                'agriculture': 'Agb…îÃÄ',
                'farmer': 'Agb…îÃÄt…î',
                'farm': 'Agb…îÃÄ',
                'crop': 'Gan',
                'harvest': 'Gan',
                'planting': 'Gan',
                'irrigation': 'T…îÃÄ',
                'fertilizer': 'Gan',
                'pesticide': 'Gan',
                'soil': 'T…îÃÄ',
                'weather': 'Xw√©',
                'rain': 'J√≠',
                'sun': 'Xw√©',
                'disease': '√Ät…îÃÄn',
                'treatment': 'Gan',
                'prevention': 'Gan',
                'yield': 'Gan',
                'profit': 'Gan',
                'cost': 'Gan',
                'price': 'Gan',
                'market': 'Gan',
                'business_plan': 'Gan …ñ…îÃÄ hw…õÃÄgb…õÃÄ',
                'investment': 'Gan',
                'loan': 'Gan',
                'cooperative': 'Gan',
                'extension': 'Gan',
                'training': 'Gan',
                'technology': 'Gan'
            },
            'bar': {
                'corn': 'Kp…õn',
                'pineapple': 'Anana',
                'agriculture': 'Agb…îÃÄ',
                'farmer': 'Agb…îÃÄt…î',
                'farm': 'Agb…îÃÄ',
                'crop': 'Gan',
                'harvest': 'Gan',
                'planting': 'Gan',
                'irrigation': 'T…îÃÄ',
                'fertilizer': 'Gan',
                'pesticide': 'Gan',
                'soil': 'T…îÃÄ',
                'weather': 'Xw√©',
                'rain': 'J√≠',
                'sun': 'Xw√©',
                'disease': '√Ät…îÃÄn',
                'treatment': 'Gan',
                'prevention': 'Gan',
                'yield': 'Gan',
                'profit': 'Gan',
                'cost': 'Gan',
                'price': 'Gan',
                'market': 'Gan',
                'business_plan': 'Gan …ñ…îÃÄ hw…õÃÄgb…õÃÄ',
                'investment': 'Gan',
                'loan': 'Gan',
                'cooperative': 'Gan',
                'extension': 'Gan',
                'training': 'Gan',
                'technology': 'Gan'
            }
        }
    
    def get_supported_languages(self) -> Dict:
        """R√©cup√®re les langues support√©es"""
        return self.supported_languages
    
    def get_language_info(self, lang_code: str) -> Optional[Dict]:
        """R√©cup√®re les informations d'une langue"""
        return self.supported_languages.get(lang_code)
    
    def translate(self, key: str, lang_code: str = 'fr', fallback: str = None) -> str:
        """
        Traduit une cl√© dans la langue sp√©cifi√©e
        
        Args:
            key (str): Cl√© √† traduire
            lang_code (str): Code de langue
            fallback (str): Texte de fallback
            
        Returns:
            str: Texte traduit
        """
        if lang_code not in self.translations:
            lang_code = 'fr'  # Fallback vers fran√ßais
        
        translation = self.translations[lang_code].get(key)
        
        if translation:
            return translation
        elif fallback:
            return fallback
        else:
            return key
    
    def translate_agricultural_term(self, term: str, lang_code: str = 'fr') -> str:
        """
        Traduit un terme agricole
        
        Args:
            term (str): Terme √† traduire
            lang_code (str): Code de langue
            
        Returns:
            str: Terme traduit
        """
        if lang_code not in self.agricultural_terms:
            lang_code = 'fr'
        
        return self.agricultural_terms[lang_code].get(term, term)
    
    def get_greeting(self, lang_code: str = 'fr') -> str:
        """R√©cup√®re une salutation dans la langue sp√©cifi√©e"""
        return self.translate('greeting', lang_code)
    
    def get_help_message(self, lang_code: str = 'fr') -> str:
        """R√©cup√®re un message d'aide dans la langue sp√©cifi√©e"""
        return self.translate('help', lang_code)
    
    def translate_business_plan_terms(self, lang_code: str = 'fr') -> Dict:
        """Traduit les termes de business plan"""
        terms = [
            'business_plan', 'investment', 'profit', 'cost', 'yield',
            'market', 'price', 'cooperative', 'loan'
        ]
        
        return {
            term: self.translate_agricultural_term(term, lang_code)
            for term in terms
        }
    
    def translate_weather_terms(self, lang_code: str = 'fr') -> Dict:
        """Traduit les termes m√©t√©o"""
        terms = ['weather', 'rain', 'sun', 'soil']
        
        return {
            term: self.translate_agricultural_term(term, lang_code)
            for term in terms
        }
    
    def translate_disease_terms(self, lang_code: str = 'fr') -> Dict:
        """Traduit les termes de maladie"""
        terms = ['disease', 'treatment', 'prevention']
        
        return {
            term: self.translate_agricultural_term(term, lang_code)
            for term in terms
        }
    
    def detect_language(self, text: str) -> str:
        """
        D√©tecte la langue d'un texte (basique)
        
        Args:
            text (str): Texte √† analyser
            
        Returns:
            str: Code de langue d√©tect√©
        """
        # D√©tection basique bas√©e sur les caract√®res
        if any(char in text for char in ['…õ', '…î', '…ñ', '…£', '≈ã']):
            return 'fon'  # Caract√®res Fon
        elif any(char in text for char in ['·∫π', '·ªç', '·π£', '·∫π']):
            return 'yor'  # Caract√®res Yoruba
        else:
            return 'fr'  # Fran√ßais par d√©faut
    
    def format_number(self, number: float, lang_code: str = 'fr') -> str:
        """
        Formate un nombre selon la langue
        
        Args:
            number (float): Nombre √† formater
            lang_code (str): Code de langue
            
        Returns:
            str: Nombre format√©
        """
        if lang_code in ['fon', 'yor', 'min', 'bar']:
            # Utiliser le format fran√ßais pour les langues locales
            return f"{number:,.0f}"
        else:
            return f"{number:,.0f}"
    
    def format_currency(self, amount: float, lang_code: str = 'fr') -> str:
        """
        Formate une monnaie selon la langue
        
        Args:
            amount (float): Montant √† formater
            lang_code (str): Code de langue
            
        Returns:
            str: Montant format√©
        """
        formatted_amount = self.format_number(amount, lang_code)
        
        if lang_code == 'yor':
            return f"‚Ç¶{formatted_amount}"
        else:
            return f"{formatted_amount} FCFA"
    
    def get_localized_response(self, response_type: str, lang_code: str = 'fr', **kwargs) -> str:
        """
        G√©n√®re une r√©ponse localis√©e
        
        Args:
            response_type (str): Type de r√©ponse
            lang_code (str): Code de langue
            **kwargs: Variables pour la r√©ponse
            
        Returns:
            str: R√©ponse localis√©e
        """
        if response_type == 'greeting':
            return self.get_greeting(lang_code)
        
        elif response_type == 'business_plan_intro':
            if lang_code == 'fon':
                return f"Bonjour ! N ye AgroBizChat. N ka ny…õÃÄ …ñ…îÃÄ hw…õÃÄgb…õÃÄ …ñ…îÃÄ h…õÃÄn ?"
            elif lang_code == 'yor':
                return f"·∫∏ k√°√†b·ªçÃÄ ! √àmi ni AgroBizChat. B√°wo ni mo ·π£e l√® r√†n y√≠n l·ªçÃÅw·ªçÃÅ ?"
            else:
                return f"Bonjour ! Je suis AgroBizChat. Comment puis-je vous aider ?"
        
        elif response_type == 'weather_info':
            weather_terms = self.translate_weather_terms(lang_code)
            if lang_code == 'fon':
                return f"N ka ny…õÃÄ xw√© …ñ…îÃÄ h…õÃÄn. {weather_terms['weather']} …ñ…îÃÄ ny…õÃÄ."
            elif lang_code == 'yor':
                return f"Mo l√® f√∫n y√≠n n√≠ √¨r√≤y√¨n √≤j√≤. {weather_terms['weather']} y·∫πn."
            else:
                return f"Je peux vous donner des informations m√©t√©o. {weather_terms['weather']} disponible."
        
        elif response_type == 'disease_diagnosis':
            disease_terms = self.translate_disease_terms(lang_code)
            if lang_code == 'fon':
                return f"N ka ny…õÃÄ √†t…îÃÄn …ñ…îÃÄ h…õÃÄn. {disease_terms['disease']} …ñ…îÃÄ ny…õÃÄ."
            elif lang_code == 'yor':
                return f"Mo l√® ·π£e √¨w√°d√¨√≠ √†r√πn. {disease_terms['disease']} y·∫πn."
            else:
                return f"Je peux diagnostiquer les maladies. {disease_terms['disease']} disponible."
        
        else:
            return self.translate('help', lang_code) 