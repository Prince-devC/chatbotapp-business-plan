#!/usr/bin/env python3
"""
Tests pour les services Semaine 3 AgroBizChat
Validation diagnostic par photo et PDF diagnostic
"""

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

from src.services.disease_detection import DiseaseDetectionService
from src.services.enhanced_pdf_generator import EnhancedPDFGenerator
import base64
import io

def test_disease_detection_service():
    """Test du service de diagnostic des maladies"""
    print("üîç Test DiseaseDetectionService...")
    
    try:
        disease_service = DiseaseDetectionService()
        
        # Cr√©er une image de test (simulation)
        test_image_data = b"fake_image_data_for_testing"
        
        # Test diagnostic ma√Øs
        diagnosis = disease_service.detect_disease(test_image_data, "mais")
        
        if diagnosis:
            assert 'culture' in diagnosis, "Culture manquante"
            assert 'disease_name' in diagnosis, "Nom de maladie manquant"
            assert 'confidence' in diagnosis, "Confiance manquante"
            assert 'severity' in diagnosis, "S√©v√©rit√© manquante"
            assert 'symptoms' in diagnosis, "Sympt√¥mes manquants"
            assert 'treatments' in diagnosis, "Traitements manquants"
            assert 'prevention' in diagnosis, "Pr√©vention manquante"
            
            print(f"‚úÖ Diagnostic ma√Øs: {diagnosis['disease_name']} ({diagnosis['confidence']:.1%})")
            print(f"‚úÖ S√©v√©rit√©: {diagnosis['severity']}")
            print(f"‚úÖ Sympt√¥mes: {len(diagnosis['symptoms'])} d√©tect√©s")
            print(f"‚úÖ Traitements: {len(diagnosis['treatments'])} recommand√©s")
            print(f"‚úÖ Pr√©vention: {len(diagnosis['prevention'])} mesures")
        else:
            print("‚ö†Ô∏è Pas de diagnostic (mode test)")
        
        # Test g√©n√©ration diagnostic
        mock_diagnosis = {
            'culture': 'mais',
            'disease_name': 'charan√ßon du ma√Øs',
            'confidence': 0.85,
            'severity': '√âlev√©e',
            'symptoms': ['Trous dans les feuilles', 'Plants affaiblis', 'Perte de rendement'],
            'treatments': [
                {
                    'name': 'Traitement chimique',
                    'description': 'Application d\'insecticides syst√©miques',
                    'products': ['Carbofuran', 'Imidacloprid'],
                    'application': 'Au moment du semis'
                }
            ],
            'prevention': [
                'Semis pr√©coce pour √©viter les pics de population',
                'Labour profond pour d√©truire les larves hivernantes'
            ]
        }
        
        diagnosis = disease_service._generate_diagnosis(mock_diagnosis, 'mais')
        assert diagnosis['culture'] == 'mais', "Culture incorrecte"
        assert diagnosis['disease_name'] == 'charan√ßon du ma√Øs', "Maladie incorrecte"
        assert diagnosis['severity'] == '√âlev√©e', "S√©v√©rit√© incorrecte"
        
        print("‚úÖ G√©n√©ration diagnostic OK")
        
        # Test traitements
        treatments = disease_service._get_treatments('charan√ßon du ma√Øs', 'mais')
        assert len(treatments) > 0, "Aucun traitement trouv√©"
        print(f"‚úÖ Base de donn√©es traitements: {len(treatments)} traitements")
        
        # Test pr√©vention
        prevention = disease_service._get_prevention('charan√ßon du ma√Øs', 'mais')
        assert len(prevention) > 0, "Aucune pr√©vention trouv√©e"
        print(f"‚úÖ Base de donn√©es pr√©vention: {len(prevention)} mesures")
        
        print("üéâ DiseaseDetectionService: Tous les tests passent!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur DiseaseDetectionService: {e}")
        return False

def test_diagnosis_pdf_generator():
    """Test du g√©n√©rateur PDF diagnostic"""
    print("\nüìÑ Test g√©n√©ration PDF diagnostic...")
    
    try:
        pdf_generator = EnhancedPDFGenerator()
        
        # Donn√©es de test pour diagnostic
        diagnosis_data = {
            'user_info': {
                'name': 'Agriculteur Test',
                'zone': 'Zone des terres de barre',
                'culture': 'mais',
                'date': '15/12/2024 √† 14:30'
            },
            'diagnosis': {
                'culture': 'mais',
                'disease_name': 'charan√ßon du ma√Øs',
                'confidence': 0.85,
                'severity': '√âlev√©e',
                'symptoms': [
                    'Trous caract√©ristiques dans les feuilles',
                    'Plants affaiblis et rabougris',
                    'Perte de rendement significative'
                ],
                'treatments': [
                    {
                        'name': 'Traitement chimique',
                        'description': 'Application d\'insecticides syst√©miques',
                        'products': ['Carbofuran', 'Imidacloprid'],
                        'application': 'Au moment du semis ou en traitement foliaire'
                    },
                    {
                        'name': 'Traitement biologique',
                        'description': 'Utilisation de n√©matodes entomopathog√®nes',
                        'products': ['Steinernema carpocapsae'],
                        'application': 'Application au sol avant semis'
                    }
                ],
                'prevention': [
                    'Semis pr√©coce pour √©viter les pics de population',
                    'Labour profond pour d√©truire les larves hivernantes',
                    'Rotation avec des cultures non-h√¥tes',
                    'Surveillance r√©guli√®re des populations'
                ]
            },
            'photo_data': base64.b64encode(b"fake_photo_data").decode('utf-8')
        }
        
        # Test g√©n√©ration PDF diagnostic
        pdf_path = pdf_generator.generate_diagnosis_pdf(
            diagnosis_data=diagnosis_data,
            output_path="test_diagnosis_report.pdf"
        )
        
        assert os.path.exists(pdf_path), f"PDF diagnostic non g√©n√©r√©: {pdf_path}"
        assert pdf_path.endswith('.pdf'), "Extension PDF incorrecte"
        
        file_size = os.path.getsize(pdf_path)
        assert file_size > 1000, f"PDF diagnostic trop petit: {file_size} bytes"
        
        print(f"‚úÖ PDF diagnostic g√©n√©r√©: {pdf_path} ({file_size} bytes)")
        
        # Test sections PDF
        # V√©rifier que toutes les sections sont cr√©√©es
        sections = [
            pdf_generator._create_diagnosis_cover_page,
            pdf_generator._create_diagnosis_summary,
            pdf_generator._create_photo_analysis_section,
            pdf_generator._create_treatments_section,
            pdf_generator._create_prevention_section
        ]
        
        for section_func in sections:
            try:
                elements = section_func(diagnosis_data)
                assert len(elements) > 0, f"Section {section_func.__name__} vide"
                print(f"‚úÖ Section {section_func.__name__} OK")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur section {section_func.__name__}: {e}")
        
        # Nettoyer le fichier de test
        if os.path.exists(pdf_path):
            os.remove(pdf_path)
            print("‚úÖ Fichier de test nettoy√©")
        
        print("üéâ PDF diagnostic: Tous les tests passent!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur PDF diagnostic: {e}")
        return False

def test_photo_processing():
    """Test du traitement des photos"""
    print("\nüì∏ Test traitement photos...")
    
    try:
        disease_service = DiseaseDetectionService()
        
        # Test pr√©traitement image
        test_image_data = b"fake_image_data_for_testing"
        processed_image = disease_service._preprocess_image(test_image_data)
        
        # Le test √©chouera car pas d'image r√©elle, mais on teste la structure
        if processed_image is None:
            print("‚ö†Ô∏è Pr√©traitement image: Pas d'image r√©elle (normal en test)")
        else:
            print("‚úÖ Pr√©traitement image OK")
        
        # Test encodage base64
        encoded_data = base64.b64encode(test_image_data).decode('utf-8')
        decoded_data = base64.b64decode(encoded_data)
        assert decoded_data == test_image_data, "Erreur encodage/d√©codage base64"
        print("‚úÖ Encodage/d√©codage base64 OK")
        
        # Test format image
        try:
            # Simuler une image PIL
            from PIL import Image
            test_image = Image.new('RGB', (100, 100), color='green')
            buffer = io.BytesIO()
            test_image.save(buffer, format='JPEG')
            image_data = buffer.getvalue()
            
            # Test redimensionnement
            processed = disease_service._preprocess_image(image_data)
            if processed:
                print("‚úÖ Traitement image PIL OK")
            else:
                print("‚ö†Ô∏è Traitement image PIL: Pas d'image r√©elle")
                
        except ImportError:
            print("‚ö†Ô∏è PIL non disponible, test image ignor√©")
        
        print("üéâ Traitement photos: Tests de base passent!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur traitement photos: {e}")
        return False

def test_diagnosis_log_model():
    """Test du mod√®le DiagnosisLog"""
    print("\nüìä Test mod√®le DiagnosisLog...")
    
    try:
        from src.models.diagnosis_log import DiagnosisLog
        
        # Test cr√©ation mod√®le
        diagnosis_log = DiagnosisLog(
            user_id=1,
            disease_name='charan√ßon du ma√Øs',
            confidence=0.85,
            severity='√âlev√©e',
            culture='mais',
            photo_data=base64.b64encode(b"test_photo").decode('utf-8'),
            diagnosis_data='{"test": "data"}'
        )
        
        # Test m√©thodes
        assert diagnosis_log.disease_name == 'charan√ßon du ma√Øs', "Nom maladie incorrect"
        assert diagnosis_log.confidence == 0.85, "Confiance incorrecte"
        assert diagnosis_log.severity == '√âlev√©e', "S√©v√©rit√© incorrecte"
        assert diagnosis_log.culture == 'mais', "Culture incorrecte"
        
        # Test get_diagnosis_data
        diagnosis_data = diagnosis_log.get_diagnosis_data()
        assert diagnosis_data == {"test": "data"}, "Donn√©es diagnostic incorrectes"
        
        # Test set_diagnosis_data
        new_data = {"new": "test_data"}
        diagnosis_log.set_diagnosis_data(new_data)
        assert diagnosis_log.get_diagnosis_data() == new_data, "Set donn√©es incorrect"
        
        # Test to_dict
        dict_data = diagnosis_log.to_dict()
        assert 'id' in dict_data, "ID manquant dans to_dict"
        assert 'user_id' in dict_data, "User ID manquant dans to_dict"
        assert 'disease_name' in dict_data, "Disease name manquant dans to_dict"
        assert 'confidence' in dict_data, "Confidence manquant dans to_dict"
        
        print("‚úÖ Cr√©ation mod√®le DiagnosisLog OK")
        print("‚úÖ M√©thodes DiagnosisLog OK")
        print("‚úÖ S√©rialisation DiagnosisLog OK")
        
        print("üéâ Mod√®le DiagnosisLog: Tous les tests passent!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mod√®le DiagnosisLog: {e}")
        return False

def test_integration_diagnosis_flow():
    """Test d'int√©gration du flow de diagnostic complet"""
    print("\nüîó Test int√©gration flow diagnostic...")
    
    try:
        disease_service = DiseaseDetectionService()
        pdf_generator = EnhancedPDFGenerator()
        
        # Simuler le flow complet
        # 1. R√©ception photo
        test_photo_data = b"fake_photo_data_for_integration_test"
        
        # 2. Diagnostic
        diagnosis = disease_service.detect_disease(test_photo_data, "mais")
        
        if diagnosis:
            # 3. Pr√©paration donn√©es pour PDF
            diagnosis_data = {
                'user_info': {
                    'name': 'Test Int√©gration',
                    'zone': 'Zone des terres de barre',
                    'culture': 'mais',
                    'date': '15/12/2024 √† 15:00'
                },
                'diagnosis': diagnosis,
                'photo_data': base64.b64encode(test_photo_data).decode('utf-8')
            }
            
            # 4. G√©n√©ration PDF
            pdf_path = pdf_generator.generate_diagnosis_pdf(
                diagnosis_data=diagnosis_data,
                output_path="test_integration_diagnosis.pdf"
            )
            
            assert os.path.exists(pdf_path), "PDF d'int√©gration non g√©n√©r√©"
            
            file_size = os.path.getsize(pdf_path)
            print(f"‚úÖ Flow complet: PDF g√©n√©r√© ({file_size} bytes)")
            
            # Nettoyer
            if os.path.exists(pdf_path):
                os.remove(pdf_path)
            
            print("‚úÖ Int√©gration flow diagnostic r√©ussie!")
        else:
            print("‚ö†Ô∏è Pas de diagnostic pour l'int√©gration (mode test)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration flow: {e}")
        return False

def run_week3_tests():
    """Ex√©cute tous les tests de la semaine 3"""
    print("üöÄ D√©but des tests Semaine 3 - Diagnostic par photo...\n")
    
    tests = [
        test_disease_detection_service,
        test_diagnosis_pdf_generator,
        test_photo_processing,
        test_diagnosis_log_model,
        test_integration_diagnosis_flow
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä R√©sultats des tests Semaine 3:")
    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"‚ùå Tests √©chou√©s: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ Tous les tests passent! Services Semaine 3 pr√™ts pour la production.")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == '__main__':
    success = run_week3_tests()
    sys.exit(0 if success else 1) 